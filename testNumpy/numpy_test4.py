# numpy_test4.py

import numpy as np

# 배열 슬라이싱
# 배열이 가진 원소(값)들을 일부 추출하는 것
# 파이썬 슬라이싱과 콤마(,)를 함께 사용하면 됨

ar = np.array([[1,2,3,4],[5,6,7,8]])
print(ar)
'''
[[1 2 3 4]
 [5 6 7 8]]
'''
print(ar.shape)  # (2, 4)

# 인덱싱 : ar[0][2] == ar[0,2]
# 슬라이싱 : 부분 선택시 콜론(:) 사용함, 시작위치:끝위치 표현함
# 시작위치 생략은 처음부터를 의미함(0), 끝위치 생략은 마지막 끝까지를 의미함(마지막 인덱스)
# 끝위치는 -1한 위치까지를 의미함
print(ar[0,:]) # 0행 전체를 추출 # [1 2 3 4]
print(ar[:,1]) # 모든 행의 1열들만 추출  # [2 6]
print(ar[1,1:]) # 1행의 1열부터 끝까지 추출  # [6 7 8]
print(ar[:2,:2]) # 0,1행 의 0,1열  값 추출
'''
[[1 2]
 [5 6]]
'''

# 인덱스 배열(indexed array) : 인덱스를 배열로 만듦
# 팬시 인덱스(fancy indexing) 이라고도 함
# numpy 가 제공하는 다른 표현의 배열 인덱싱 방식임
# boolean 배열 인덱싱과 정수 배열 인덱싱 방식 2가지가 잇음
# 인덱싱을 위한 별도의 배열을 만들어서 사용함
# 주의 : 값을 가진 배열과 인덱싱 배열의 크기(갯수)가 반드시 같아야 함

# 1. boolean 배열 인덱싱으로 배열값 추출하기
# True,False 로 배열을 만듦 : 추출할 인덱스에 True 를 사용하는 방식임
# 예, 홀수번째 위치의 값들만 추출하는 경우
ar = np.array([1,2,3,4,5,6,7,8,9,10])
idxArray = np.array([True,False,True,False,True,False,True,False,True,False])
print(ar[idxArray])  # [1 3 5 7 9]

# 벡터화 연산 또는 조건문 연산을 사용할 수도 있음
print(ar % 2) # ar[0] % 2 , ar[1] % 2 , ar[2] % 2, ..., ar[9] % 2 => [1 0 1 0 1 0 1 0 1 0]
# 각 인덱스 위치의 값을 2로 나눈 나머지로 표현한 배열이 결과임
print(ar % 2 == 0) # 각 위치의 값을 2로 나눈 나머지가 0과 같으냐의 결과를 배열로 확인
# [False  True False  True False  True False  True False  True]
print(ar[ar%2==0])  # 백터화 연산을 인덱싱으로 사용함
# [ 2  4  6  8 10] # 값이 짝수인 것만 추출

# 2. 정수 배열 인덱싱
# 인덱싱 배열을 만들 때, 추출할 위치의 인덱스를 배열로 구성함
ar2 = np.array([11,22,33,44,55,66,77,88,99])
idxArray2 = np.array([0,2,5,7,8])
print(ar2[idxArray2]) # [11 33 66 88 99]

# 배열 인덱싱은 다차원 배열의 각 차원에 대해서도 적용할 수 있음
ar3 = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) # 3행 4열
print(ar3)
print(ar3[:,[True,False,False,True]]) # 전체행에 대해 0,3열 값 추출
print(ar3[[2,0,1],:]) # 2,0,1 행 순으로 순서를 바꿔서 모든 열값 추출
