# pandas_test1.py

import pandas as pd
import numpy as np

# 데이터 분석을 위해서 Series 와 DataFrame 을 준비한다.
# Series : numpy 의 1차원배열(Vector) 또는 리스트(list) + 인덱스라벨

# 1. Series 객체 생성
# 예 : 각 도시의 2023년도 인구 데이터를 시리즈로 만든다면
s = pd.Series([9904312, 3448737, 2890451, 2466052], index=['서울','부산','인천','대구'])
print(s)
'''
서울    9904312
부산    3448737
인천    2890451
대구    2466052
dtype: int64     운영체제마다 자료형은
'''

# Series 객체 생성시, 인덱스라벨은 생략될 수 있음
# 자동으로 0으로 시작하는 정수가 인덱스 라벨로 사용됨
print(pd.Series(range(10,14)))
'''
0    10
1    11
2    12
3    13
dtype: int64
'''

# 2. DataFrame(데이터프레임 : 표 - 행렬, matrix, 2차원 배열) 만들기
# 변수 = pd.DataFrame(행렬변수 또는 행렬데이터, index=행인덱스라벨, columns=열컬럼라벨))
# 행렬변수 또는 행렬데이터 : dict (사전자료형)
data = {
 "2019": [9904312, 3448737, 2890451, 2466052],
 "2020": [9631482, 3393191, 2632035, 2431774],
 "2021": [9762546, 3512547, 2517680, 2456016],
 "2022": [9853972, 3655437, 2466338, 2473990],
 "지역": ["수도권", "경상권", "수도권", "경상권"],
 "2010-2015 증가율": [0.0283, 0.0163, 0.0982, 0.0141]
} # dict 사전자료형

print(type(data))  # <class 'dict'>
print(data)  # {'2019': [9904312, 3448737, 2890451, 2466052], '2020': [9631482, 3393191, 2632035, 2431774], '2021': [9762546, 3512547, 2517680, 2456016], '2022': [9853972, 3655437, 2466338, 2473990], '지역': ['수도권', '경상권', '수도권', '경상권'], '2010-2015 증가율': [0.0283, 0.0163, 0.0982, 0.0141]}

# 출력시 컬럼 나열 순서를 재배치 할 때 DataFrame 사용할 수 있음
#   => 표 형태로 만들고자 한다면 DataFrame 사용
# 컬럼 라벨 : dict의 key
columns = ["지역", "2019", "2020", "2021", "2022", "2010-2015 증가율"]
# 인덱스 라벨(행라벨)
index = ['서울','부산','인천','대구']
df = pd.DataFrame(data, index=index, columns=columns)
print(df)
'''
     지역     2019     2020     2021     2022  2010-2015 증가율
서울  수도권  9904312  9631482  9762546  9853972         0.0283
부산  경상권  3448737  3393191  3512547  3655437         0.0163
인천  수도권  2890451  2632035  2517680  2466338         0.0982
대구  경상권  2466052  2431774  2456016  2473990         0.0141
'''

# 컬럼라벨(column)가 생략되면, 위의 data 구성 순서대로 프레임이 구성됨
df2 = pd.DataFrame(data, index=index)
print(df2) # dict  의 key가 자동 컬럼라벨이 됨
'''
       2019     2020     2021     2022   지역  2010-2015 증가율
서울  9904312  9631482  9762546  9853972  수도권         0.0283
부산  3448737  3393191  3512547  3655437  경상권         0.0163
인천  2890451  2632035  2517680  2466338  수도권         0.0982
대구  2466052  2431774  2456016  2473990  경상권         0.0141
'''

# 인덱스라벨도 생략할 수 있음
df3 = pd.DataFrame(data)
print(df3) # 인덱스 순번이 자동 인덱스라벨이 됨 (0,1,2,...)
'''
      2019     2020     2021     2022   지역  2010-2015 증가율
0  9904312  9631482  9762546  9853972  수도권         0.0283
1  3448737  3393191  3512547  3655437  경상권         0.0163
2  2890451  2632035  2517680  2466338  수도권         0.0982
3  2466052  2431774  2456016  2473990  경상권         0.0141
'''

# 파일 입출력 기능 제공
# 파일에 기록(저장) : 데이터프레임변수.to_파일종류('파일명.확장자', 속성='값',......)
# df.to_csv('sample.csv', mode='w', encoding='utf-8', sep=',')

# 파일로 부터 읽어와서 DataFrame 에 저장
# 데이터프레임변수 = pd.read_파일종류('파일명,확장자'', 속성값='값',...)
df4 = pd.read_csv('sample.csv')
print(df4)
'''
  Unnamed: 0   지역     2019     2020     2021     2022  2010-2015 증가율
0         서울  수도권  9904312  9631482  9762546  9853972         0.0283
1         부산  경상권  3448737  3393191  3512547  3655437         0.0163
2         인천  수도권  2890451  2632035  2517680  2466338         0.0982
3         대구  경상권  2466052  2431774  2456016  2473990         0.0141
'''


