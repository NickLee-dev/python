# pandas_test3.py
# 데이터프레임 조작처리

import pandas as pd
import numpy as np

# 데이터프레임(DataFrame) 클래스
# 데이터들을 가지고 있는 표(테이블)를 만들 때 사용하는 클래스임
'''
가장 간단한 데이터프레임 생성 방법
1. 딕셔너리를 만든다. => key: value (값은 리스트나 일차원 배열로 작성함 = 컬럼(열)이 됨)
    key = 컬럼라벨이 됨 (기본 문자열임)
    주의 : 값에 해당되는 리스트나 일차원배열의 데이터 갯수가 모두 같아야 함
2. DataFrame 클래스 생성자에 딕셔너리를 초기값으로 지정해서 객체 생성함
'''
data = {
 "2019": [9904312, 3448737, 2890451, 2466052],
 "2020": [9631482, 3393191, 2632035, 2431774],
 "2021": [9762546, 3512547, 2517680, 2456016],
 "2022": [9853972, 3655437, 2466338, 2473990],
 "지역": ["수도권", "경상권", "수도권", "경상권"],
 "2010-2015 증가율": [0.0283, 0.0163, 0.0982, 0.0141]
} # dict 사전자료형

# 컬럼나열 순서 재배치를 원하면 컬럼라벨을 원하는 순서대로 지정하면 됨
columns = ['지역','2019','2020','2021','2022','2010-2015 증가율']
index = ['서울','부산','인천','대구']
df = pd.DataFrame(data,index=index,columns=columns)
print(df)
'''
     지역     2019     2020     2021     2022  2010-2015 증가율
서울  수도권  9904312  9631482  9762546  9853972         0.0283
부산  경상권  3448737  3393191  3512547  3655437         0.0163
인천  수도권  2890451  2632035  2517680  2466338         0.0982
대구  경상권  2466052  2431774  2456016  2473990         0.0141
'''

# 속성 : name, values, columns, index
print(df.values) # 2차원배열
'''
[['수도권' 9904312 9631482 9762546 9853972 0.0283]
 ['경상권' 3448737 3393191 3512547 3655437 0.0163]
 ['수도권' 2890451 2632035 2517680 2466338 0.0982]
 ['경상권' 2466052 2431774 2456016 2473990 0.0141]]
'''
print(type(df.values)) # <class 'numpy.ndarray'>
print(df.columns) # Index(['지역', '2019', '2020', '2021', '2022', '2010-2015 증가율'], dtype='object') # 컬럼라벨만
print(df.index) # Index(['서울', '부산', '인천', '대구'], dtype='object') # 인덱스라벨만

df.name = "년도별 도시별 인구"
df.index.name = "도시"
df.columns.name = "특성"
print(df)
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
서울  수도권  9904312  9631482  9762546  9853972         0.0283
부산  경상권  3448737  3393191  3512547  3655437         0.0163
인천  수도권  2890451  2632035  2517680  2466338         0.0982
대구  경상권  2466052  2431774  2456016  2473990         0.0141
'''

# 데이터프레임의 열(컬럼) 데이터 갱신, 추가, 삭제할 수 있음
# 시리즈처럼 인덱싱 사용 : 컬럼라벨, 인덱스라벨을 사용함
# 예 : '2010-2015 증가율' 이라는 이름의 열값을 변경한다면
df["2010-2015 증가율"] = df["2010-2015 증가율"] * 100 # 컬럼라벨 존재함 : 갱신(update)
print(df)
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
서울  수도권  9904312  9631482  9762546  9853972           2.83
부산  경상권  3448737  3393191  3512547  3655437           1.63
인천  수도권  2890451  2632035  2517680  2466338           9.82
대구  경상권  2466052  2431774  2456016  2473990           1.41
'''

df["2019-2020 증가율"] = ((df['2020']-df['2019'])/ df['2019']*100).round(2) # 컬럼라벨 없으면 추가(add)
print(df)
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율  2019-2020 증가율
도시                                                                       
서울  수도권  9904312  9631482  9762546  9853972           2.83          -2.75
부산  경상권  3448737  3393191  3512547  3655437           1.63          -1.61
인천  수도권  2890451  2632035  2517680  2466338           9.82          -8.94
대구  경상권  2466052  2431774  2456016  2473990           1.41          -1.39
'''

# 데이터프레임의 열 삭제 : del 명령 사용함
del df["2019-2020 증가율"]
print(df)
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
서울  수도권  9904312  9631482  9762546  9853972           2.83
부산  경상권  3448737  3393191  3512547  3655437           1.63
인천  수도권  2890451  2632035  2517680  2466338           9.82
대구  경상권  2466052  2431774  2456016  2473990           1.41
'''

# 데이터프레임에서는 하나의 키(key : column, 열) 에 대해 열단위로 인덱싱 가능함
# 컬럼라벨(key)을 이용함
print(df['지역'])
'''
도시
서울    수도권
부산    경상권
인천    수도권
대구    경상권
Name: 지역, dtype: object
'''
print(type(df['지역'])) # <class 'pandas.core.series.Series'> # DataFrame 의 한 컬럼을 추출하면 Series로 출력

# 여러 개의 컬럼(열)을 인덱싱할 수도 있음
print(df[['2019', '2022']]) # [] 두겹 사용
'''
특성     2019     2022
도시                  
서울  9904312  9853972
부산  3448737  3655437
인천  2890451  2466338
대구  2466052  2473990
'''

# 기존의 데이터 프레임에서 일부를 추출해서, 새로운 데이터프레임 생성
df2 = df[['2020']] # [] 두겹 사용 => DataFrame
print(df2)
'''
특성     2020
도시         
서울  9631482
부산  3393191
인천  2632035
대구  2431774
'''
print(type(df2)) # <class 'pandas.core.frame.DataFrame'>

s2 = df['2020'] # [] 한겹 사용 => Series
print(s2)
'''
도시
서울    9631482
부산    3393191
인천    2632035
대구    2431774
Name: 2020, dtype: int64
'''
print(type(s2)) # <class 'pandas.core.series.Series'>

# 인덱싱시 주의 사항
# 정수 인덱스는 데이터프레임에서는 행 인덱싱에만 사용할 수 있음
# 열(column, key) 인덱스에 정수 인덱스 사용하면 에러남 (KeyError 발생함)
# print(df[0]) #  KeyError : 0

# 데이터프레임 컬럼에 정수 인덱스가 가능한 경우는, 숫자형 라벨을 지정한 경우에는 가능함
df3 = pd.DataFrame(np.arange(12).reshape(3, 4))
print(df3)
'''
   0  1   2   3
0  0  1   2   3
1  4  5   6   7
2  8  9  10  11
'''
print(df3[2])
'''
0     2
1     6
2    10
Name: 2, dtype: int64
'''
print(type(df3))   # <class 'pandas.core.frame.DataFrame'>
print(df3[[1,2]])
'''
   1   2
0  1   2
1  5   6
2  9  10
'''
print(type(df3[[1,2]]))  # <class 'pandas.core.frame.DataFrame'>

# 행 인덱싱 : 항상 슬라이싱해야 함 (라벨로 슬라이싱 가능함)
print(df[:1])  # 0행 추출 => df[1] : 1열 추출 (열인덱싱)
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
서울  수도권  9904312  9631482  9762546  9853972           2.83
'''
print(df[1:2])  # 1행 추출 : result type DataFrame
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
부산  경상권  3448737  3393191  3512547  3655437           1.63
'''
print(df[1:3]) # 1,2 행 추출
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
부산  경상권  3448737  3393191  3512547  3655437           1.63
인천  수도권  2890451  2632035  2517680  2466338           9.82
'''
print(df['서울':'부산'])
'''
특성   지역     2019     2020     2021     2022  2010-2015 증가율
도시                                                        
서울  수도권  9904312  9631482  9762546  9853972           2.83
부산  경상권  3448737  3393191  3512547  3655437           1.63
'''

# 개별 데이터 1개 인덱싱
# 데이터프레임변수['컬럼라벨']['행인덱스라벨']
print(df['2019']['서울']) # 9904312
